{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What's winaccent","text":"<p>winaccent is a simple and lightweight Python module for easily retrieving Windows' accent color, including its shades, specific window chrome colors such as active/inactive title bar and window borders and settings like theme (both apps' and system's theme), transparency effects, and more. Supports Windows 8.x, 10 and 11 and doesn't require additional dependencies.</p> <p>\u00a0\u00a0Get started</p>"},{"location":"about/changelog/","title":"Changelog","text":""},{"location":"about/changelog/#2.1.0","title":"Version 2.1.0 (June 24, 2025)","text":""},{"location":"about/changelog/#new-features","title":"New features","text":"<ul> <li>Added 2 flags: <code>get_accent_from_dwm</code> and <code>dark_mode_window</code></li> <li>Now you can retrieve the active/inactive titlebar text color from the <code>titlebar_active_text</code> and <code>titlebar_inactive_text</code> variables.</li> <li>Now you can retrieve the actual active/inactive titlebar color regardless if the \"Show accent color on title bars and window borders\" setting is enabled or not.</li> <li>Now you can retrieve the inactive window border color using <code>window_border_inactive</code>. For retrieving the active window border color, use <code>window_border_active</code>. <code>window_border</code> will be deprecated starting with version 3.0.0.</li> <li>Now you can retrieve the start menu and taskbar color using <code>start_menu</code> and <code>taskbar</code> (you can also check if they are colored or not using <code>is_start_menu_colored</code> and <code>is_taskbar_colored</code> booleans).</li> </ul>"},{"location":"about/changelog/#improvements","title":"Improvements","text":"<ul> <li>Redesigned the GUI demo to look better and cleaner.</li> <li>New documentation website (this one).</li> </ul>"},{"location":"about/changelog/#regressions","title":"Regressions","text":"<ul> <li>Compatibility with Python 3.6 and 3.7 is broken (will be fixed in the next update).</li> </ul>"},{"location":"about/changelog/#2.0.1","title":"Version 2.0.1 (October 21, 2024)","text":""},{"location":"about/changelog/#breaking-changes","title":"Breaking changes","text":"<ul> <li>The minimum Python version supported was changed to 3.6</li> <li>The module will now raise an <code>ImportError</code> exception instead of an <code>UnsupportedPlatfromException</code> exception</li> <li><code>on_accent_changed_listener()</code> function was renamed to <code>on_appearance_changed()</code></li> <li><code>update_accent_colors()</code> function was renamed to <code>update_values()</code></li> </ul>"},{"location":"about/changelog/#new-features_1","title":"New features","text":"<ul> <li>Added Windows 8.x support</li> <li>Added a function to convert HEX colors to RGB tuples (<code>hex_to_rgb()</code>)</li> <li>Retrieve apps' theme and system's theme using <code>apps_use_light_theme</code> and <code>system_uses_light_theme</code> booleans</li> </ul>"},{"location":"about/changelog/#fixes","title":"Fixes","text":"<ul> <li>Get the right <code>window_border</code> color in Windows 10 and 11</li> <li>Use placeholder values if the registry keys for some values do not exist</li> <li>More optimizations and improvements</li> </ul>"},{"location":"about/changelog/#what-happened-to-v200","title":"What happened to v2.0.0?","text":"<p>Well, that version had a bug that I didn't notice. The <code>system_uses_light_theme</code> boolean was returning the wrong value for the current system theme. This is fixed in v2.0.1.</p>"},{"location":"about/changelog/#1.1.0","title":"Version 1.1.0 (September 26, 2024)","text":""},{"location":"about/changelog/#whats-new","title":"What's new","text":"<ul> <li>Now you can check if the \"Show accent color on title bars and window borders\" option from Settings &gt; Personalization &gt; Color is enabled using the <code>is_titlebar_colored</code> boolean.</li> <li>New colors added: <code>titlebar_active</code>, <code>titlebar_inactive</code>, <code>window_border</code> and <code>accent_menu</code>.</li> <li>Some demo improvements.</li> </ul>"},{"location":"about/changelog/#1.0.1","title":"Version 1.0.1 (September 9, 2024)","text":""},{"location":"about/changelog/#whats-new_1","title":"What's new","text":"<ul> <li>Raise a <code>winaccent.UnsupportedPlatformException</code> exception when the module is imported on a different OS than Windows and Windows versions older than 10.</li> <li><code>winreg</code> module won't be imported anymore on platforms other than Windows</li> <li>Now <code>python -m winaccent</code> supports an optional <code>--mode</code> argument.</li> </ul>"},{"location":"about/changelog/#1.0.0","title":"Version 1.0.0 (September 1, 2024)","text":""},{"location":"about/changelog/#breaking-changes_1","title":"Breaking changes","text":"<p><code>accent_light</code> was renamed to <code>accent_dark</code> and <code>accent_dark</code> to <code>accent_light</code> to reflect the lightness/darkness of the color. This means that after upgrading to 1.0.0 these colors will be inverted.</p> <p>The easiest fix for this is to replace all occurences of <code>accent_light</code> with <code>accent_light_mode</code> and <code>accent_dark</code> with <code>accent_dark_mode</code>. </p> <p><code>accent_light_mode</code> and <code>accent_dark_mode</code> variables are named to reflect the theme (light/dark mode) and work the same way like <code>accent_light</code> and <code>accent_dark</code> variables from previous versions.</p>"},{"location":"about/changelog/#whats-new_2","title":"What's new","text":"<ul> <li>Added accent color shades.</li> <li>When running <code>python -m winaccent</code> in terminal a window with the current accent palette will be shown</li> </ul>"},{"location":"about/changelog/#0.3.0","title":"Version 0.3.0 (August 19, 2024)","text":""},{"location":"about/changelog/#whats-new_3","title":"What's new","text":"<ul> <li>Added accent color change listener</li> </ul>"},{"location":"about/changelog/#0.2.0","title":"Version 0.2.0 (August 18, 2024)","text":""},{"location":"about/changelog/#whats-new_4","title":"What's new:","text":"<ul> <li>Removed dependency on <code>darkdetect</code> (this means that <code>accent_auto</code> is now deprecated)</li> <li>Added new function: <code>update_accent_colors()</code></li> </ul>"},{"location":"about/changelog/#0.1.0","title":"Version 0.1.0 (August 16, 2024)","text":"<p>The first version ever released.</p>"},{"location":"about/license/","title":"License","text":"<p>winaccent is MIT-licensed. You can read a copy of the license text bellow or here:</p> <pre><code>MIT License\n\nCopyright (c) 2024-2025 Valer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"about/requirements/","title":"Requirements","text":"<p>Here are the following requirements that must be met for being able to run winaccent without any problem:</p> <p> Windows 8.x or later   Python 3.6 or later</p> <p>Warning</p> <p>winaccent is a Windows-only module. Trying to import it on other operating systems will raise an <code>ImportError</code> exception. See Using winaccent in cross-platform applications for more information and examples for running winaccent only on Windows systems and recommendations for other platforms.</p>"},{"location":"colors/accent-color-and-shades/","title":"Accent color and shades","text":"<p>Windows generates an accent palette based on the current accent color. It consists of 7 colors:</p> <ul> <li>3 dark variants (-3, -2 and -1)</li> <li>the original accent color (A)</li> <li>3 light variants (+1, +2 and +3)</li> </ul> <p></p> <p>For the current accent color we'll use  #0078D4 (the default accent color). The output values shown bellow were generated on a Windows 11 machine.</p> <p>For simplicity, you can get a specific accent color shade from one of the following variables:</p> Variable Example color output accent_light (or accent_dark_mode)  \u00a0\u00a0#4CC2FF accent_normal  \u00a0\u00a0#0078D4 accent_dark (or accent_light_mode)  \u00a0\u00a0#0067C0 <p>Here's an example for printing them in the console:</p> <pre><code>import winaccent\n\nprint(f\"accent_light: {winaccent.accent_light}\")  # winaccent.accent_dark_mode returns the same color\nprint(f\"accent_normal: {winaccent.accent_normal}\")\nprint(f\"accent_dark: {winaccent.accent_dark}\")  # winaccent.accent_light_mode returns the same color\n</code></pre> <p>If you need a different shade than the ones listed above, here's the complete list of variables:</p> Variable Example color output accent_light_3  \u00a0\u00a0#99EBFF accent_light_2  \u00a0\u00a0#4CC2FF accent_light_1  \u00a0\u00a0#0091F8 accent_normal  \u00a0\u00a0#0078D4 accent_dark_1  \u00a0\u00a0#0067C0 accent_dark_2  \u00a0\u00a0#003E92 accent_dark_3  \u00a0\u00a0#001A68 <pre><code>import winaccent\n\nprint(f\"accent_light_3: {winaccent.accent_light_3}\")\nprint(f\"accent_light_2: {winaccent.accent_light_2}\")\nprint(f\"accent_light_1: {winaccent.accent_light_1}\")\nprint(f\"accent_normal: {winaccent.accent_normal}\")\nprint(f\"accent_dark_1: {winaccent.accent_dark_1}\")\nprint(f\"accent_dark_2: {winaccent.accent_dark_2}\")\nprint(f\"accent_dark_3: {winaccent.accent_dark_3}\")\n</code></pre> <p>Note</p> <p><code>accent_dark_mode</code>, <code>accent_light</code> and <code>accent_light_2</code> return the same color. <code>accent_light_mode</code>, <code>accent_dark</code> and <code>accent_dark_1</code> also return the same color. </p> <p>Note</p> <p>The accent palette generation algorithm is slightly different in Windows 11 from the one in Windows 10. Here's an example with the  #FF8C00 (Gold) accent color on both Windows 10 and 11:</p> <p> Windows 10 </p> <p> Windows 11 </p> <p>Note</p> <p>In Windows 8.x there's no accent palette generation algorithm. For maintaining compatibility, winaccent will automatically generate a palette using a custom algorithm that tries to immitate the one from Windows 10. It's not perfect, but there's still room for improvement.</p> <p>Using the same accent color as in the example above with Windows 10 and 11 on Windows 8.1 will give this result (Windows 8.0 is limited to only a few predefined accent colors):</p> <p> Windows 8.1 </p> <p>You can also try it without installing anything here.</p> <p>Warning</p> <p>The color variables will return the colors in HEX strings (e.g. <code>#RRGGBB</code>). If you need an RGB tuple instead of a HEX color string, use the <code>hex_to_rgb()</code> function. See HEX string color to RGB integer tuple function for more information.</p> <p>Note</p> <p>You can also force winaccent to use the accent color provided by DWM (<code>ColorizationColor</code> in Windows 8.x and <code>AccentColor</code> in Windows 10 and 11 in the registry) and generate the accent palette accordingly. To do that, you have to enable the <code>get_accent_from_dwm</code> flag. See <code>get_accent_from_dwm</code> flag for more information.</p> <p>You may want to take a look at Microsoft's accent color guidelines. You can do that here.</p>"},{"location":"colors/system-colors/","title":"System colors","text":""},{"location":"colors/system-colors/#taskbar-and-start-menu-color","title":"Taskbar and Start Menu color","text":"<p>winaccent can also retrieve the taskbar and Start menu colors. You can do that using the <code>start_menu</code> and <code>taskbar</code> variables. Here is an example:</p> <pre><code>import winaccent\n\nprint(f\"Taskbar color: {winaccent.taskbar}\")\nprint(f\"Start menu color: {winaccent.start_menu}\")\n</code></pre> <p>These variables can also return the right colors if the \"Show accent color on Start and taskbar\" is enabled in Settings &gt; Personalization &gt; Colors.</p> <p>Note</p> <p>You can also check if the Start menu and taskbar are colored using the <code>is_start_menu_colored</code> and <code>is_taskbar_colored</code> booleans. See Colored taskbar and Start menu for more information.</p> <p>Warning</p> <p>On Windows 8.x, the taskbar color will be returned without opacity to prevent some issues.</p>"},{"location":"colors/system-colors/#menu-accent-color","title":"Menu accent color","text":"<p>The accent color used in lockscreen, UAC (Windows 10), welcome screen, start menu (Windows 8.x), Metro dialogs and other elements is called the menu accent color (<code>AccentMenu</code> in the registry). You can get this accent color using the <code>accent_menu</code> variable (usually it's the same color as <code>accent_normal</code>, but can be modified in the registry). Here's an example:</p> <pre><code>import winaccent\n\nprint(f\"Menu accent color: {winaccent.accent_menu}\")\n</code></pre>"},{"location":"colors/window-chrome-colors/","title":"Window chrome colors","text":"<p>The window chrome refers to the parts of a window that are drawn by the operating system rather than by the application itself. This typically includes the title bar, window borders and close/minimize/maximize buttons. These elements surround the main content area of the application and allow the user to move, resize, or control the window. Not to be confused with the Google Chrome web browser.</p> <p></p> <p>winaccent allows you to get some window chrome colors. You can do that using the following variables:</p> Variable Description titlebar_active Returns the active title bar color titlebar_active_text Returns the active title bar text color titlebar_inactive Returns the inactive title bar color titlebar_inactive_text Returns the inactive title bar text color window_border_active Returns the active window border color window_border_inactive Returns the inactive window border color <p>Here's an example for retrieving the colors:</p> <pre><code>import winaccent\n\nprint(f\"Active title bar color: {winaccent.titlebar_active}\")\nprint(f\"Active title bar text color: {winaccent.titlebar_active_text}\")\nprint(f\"Inactive title bar color: {winaccent.titlebar_inactive}\")\nprint(f\"Inactive title bar text color: {winaccent.titlebar_inactive_text}\")\nprint(f\"Active window border: {winaccent.window_border_active}\")\nprint(f\"Inactive window border: {wintaccent.window_border_inactive}\")\n</code></pre> <p>Note</p> <p>If you want to obtain the dark mode window chrome colors, you will have to enable the <code>dark_mode_titlebar</code> flag. See <code>dark_mode_window</code> flag for more information.</p> <p>Note</p> <p>For checking if windows have colored title bars and borders, you can use the <code>is_titlebar_colored</code> boolean variable. See Colored title bars and window borders for more information.</p> <p>Important</p> <p>The window border color is translucent (except when the \"Show accent color on title bars and window borders\" option from Settings &gt; Personalization &gt; Colors is enabled). winaccent will return the window border color without opacity to prevent some issues.</p> <p>Also, the window border color is actually slightly lighter than the title bar color on Windows 10 (only on Windows 11 it's the same).</p> <p> Windows 10 </p> <p> Windows 11 </p> <p>Title bar and window border colors can also be customized from the registry:</p> <p> </p> <p>Warning</p> <p>These variable might not return the right colors on systems that use custom themes or are heavily modified.</p>"},{"location":"getting-started/example-usage/","title":"Example usage","text":""},{"location":"getting-started/example-usage/#printing-the-accent-color","title":"Printing the accent color","text":"<p>winaccent is very easy to use. Here's how we can print the accent color the system is using:</p> <pre><code>import winaccent\n\nprint(f\"Accent color: {winaccent.accent_normal}\")\n</code></pre> <p>Simple as that.</p>"},{"location":"getting-started/example-usage/#using-winaccent-in-cross-platform-applications","title":"Using winaccent in cross-platform applications","text":"<p>Unfortunately, winaccent is a Windows-only module, meaning that it won't work on other platforms like Linux or MacOS. Trying to import winaccent on a platform other than Windows or a Windows version older than 8.0 will raise an <code>ImportError</code> exception. When using this module in cross-platform applications, make sure you only import and use winaccent on Windows systems to avoid errors. For other operating systems, you will need to find other ways to get the system's accent color or hardcode it to a different color. Here's an example:</p> <pre><code>import sys\n\nif sys.platform == \"win32\":\n    # Windows\n\n    import winaccent\n    print(winaccent.accent_normal)\nelse:\n    # Other platforms\n    #\n    # You will need to find different ways for retrieving the\n    # system accent color or hardcode it to a different color.\n\n    print(\"The script is running on an unsupported platform.\")\n</code></pre> <p>If you're using a Python version that supports Windows versions older than 8.0 (Python 3.8 and older), use the following example:</p> <pre><code>import sys\n\nif sys.platform == \"win32\":\n    # Get Windows version (major.minor)\n    windows_version = sys.getwindowsversion()\n    current_version = float(f\"{windows_version.major}.{windows_version.minor}\")\n\n    # Check if the Windows version is greater than or equal to 6.2 (Windows 8.0)\n    # Windows 8.1 will return 6.3 and Windows 10 and 11 will return 10.0\n    if current_version &gt;= 6.2:\n        import winaccent\n        print(winaccent.accent_normal)\nelse:\n    # Other platforms\n    #\n    # You will need to find different ways for retrieving the\n    # system accent color or hardcode it to a different color.\n\n    print(\"The script is running on an unsupported platform.\")\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>winaccent can be easily installed using the following command:</p> <pre><code>pip install winaccent\n</code></pre> <p>To upgrade the module when a newer version is released, you can run the following command:</p> <pre><code>pip install --upgrade --no-cache winaccent\n</code></pre>"},{"location":"getting-started/try-the-demo/","title":"Try the demo","text":"<p>Before using winaccent, you can try the demo program to see how it works and what features are implemented. The demo program can be launched in 3 different modes: console mode, GUI mode and auto mode.</p> <p>Warning</p> <p>You must have winaccent installed to be able to run the demo program. See Installation for more information about installing winaccent.</p>"},{"location":"getting-started/try-the-demo/#the-console-mode","title":"The console mode","text":"<p>In the console mode, the demo program will display the current winaccent version and everything winaccent can get. To launch the demo program, type the following command in your terminal:</p> <pre><code>python -m winaccent --mode console\n</code></pre> <p>The output will look like this:</p> <pre>\n<code>winaccent 2.1.0\n===============\n\nAccent palette\n--------------\n\naccent_light_3:                 #99EBFF\naccent_light_2:                 #4CC2FF\naccent_light_1:                 #0091F8\naccent_normal:                  #0078D4\naccent_dark_1:                  #0067C0\naccent_dark_2:                  #003E92\naccent_dark_3:                  #001A68\n\n\nWindow chrome\n-------------\n\nis_titlebar_colored:            False\ntitlebar_active:                #F3F3F3\ntitlebar_active_text:           #000000\ntitlebar_inactive:              #F3F3F3\ntitlebar_inactive_text:         #929292\nwindow_border_active:           #757575\nwindow_border_inactive:         #757575\n\n\nStart Menu\n----------\n\nis_start_menu_colored:          False\nstart_menu:                     #242424\n\n\nTaskbar\n-------\n\nis_taskbar_colored:             False\ntaskbar:                        #1C1C1C\n\n\nUI Appearance\n-------------\n\ntransparency_effects_enabled:   True\napps_use_light_theme:           False\nsystem_uses_light_theme:        False\n\n\nOther colors\n------------\n\naccent_menu:                    #0078D4\n</code>\n</pre>"},{"location":"getting-started/try-the-demo/#the-gui-mode","title":"The GUI mode","text":"<p>In the GUI mode, the demo program will display a window with an interactive user interface where you can better explore what winaccent has to offer. To run the demo program in the GUI mode, run the following command:</p> <pre><code>python -m winaccent --mode gui\n</code></pre> <p> The GUI demo looks like this:</p> <p> <p>Windows 8.x</p></p> <p> <p>Windows 10</p></p> <p> <p>Windows 11</p></p> <p>Warning</p> <p>The GUI mode will not work if Python isn't installed with tcl/tk support, because the GUI demo program is written in tkinter. If you installed Python on your computer without tcl/tk support, follow these steps to modify your installation to include the support:</p> <p>Windows 11:</p> <ol> <li>Open the Settings app.</li> <li>In the sidebar, click on \"Apps\".</li> <li>In the Apps section, go to \"Installed apps\"</li> <li>Using the search box, look for \"Python\" and find your Python installation (not the Launcher).</li> <li>Click the 3 dots next to your Python installation and choose \"Modify\".</li> <li>If the User Account Control window appears, click on \"Yes\".</li> <li>After the Python Setup window appeared, choose \"Modify\".</li> <li>In the Optional features section, make sure \"tcl/tk and IDLE\" option is checked and then click \"Next\".</li> </ol> <p>Windows 10:</p> <ol> <li>Open the Settings app.</li> <li>From the list of settings categories, choose \"Apps\"</li> <li>Using the search box, look for \"Python\" and find your Python installation (not the Launcher).</li> <li>Click on your Python installation, then choose \"Modify\".</li> <li>If the User Account Control window appears, click on \"Yes\".</li> <li>After the Python Setup window appeared, choose \"Modify\"</li> <li>In the Optional features section, make sure \"tcl/tk and IDLE\" option is checked and then click \"Next\".</li> </ol> <p>Windows 8.x</p> <ol> <li>Open Control Panel.</li> <li>Using the search box, look for \"Programs and features\" and when found click on it.</li> <li>In the list of the programs displayed, look for your Python installation (not the Launcher), right-click on it and then choose \"Change\".</li> <li>If the User Account Control window appears, click on \"Yes\"</li> <li>After the Python Setup window appeared, choose \"Modify\"</li> <li>In the Optional features section, make sure \"tcl/tk and IDLE\" option is checked and then click \"Next\".</li> </ol> <p>After installation of tcl/tk, the GUI demo program should be working.</p>"},{"location":"getting-started/try-the-demo/#the-auto-mode","title":"The auto mode","text":"<p>The auto mode will basically run the demo program in GUI mode if tcl/tk is available, installed correctly and no other error occurs or in console mode if tcl/tk is unavailable, not installed correctly or an error occured. To run the demo program in the auto mode, run the following command:</p> <pre><code>python -m winaccent --mode auto\n</code></pre> <p>... or even shorter:</p> <pre><code>python -m winaccent\n</code></pre>"},{"location":"other-features/flags/","title":"Flags","text":"<p>Flags are winaccent settings that customize its behavior. These flags can be used to enable features and modify the output of some variables. All flags belong to the <code>Flags</code> class. By default, every flag defaults to <code>False</code>. </p> <p>Important</p> <p>After enabling or disabling a flag, make sure to always call <code>update_values()</code> for the changes to take effect.</p> <p>Currently, there are only 2 flags available:</p>"},{"location":"other-features/flags/#get_accent_from_dwm-flag","title":"<code>GET_ACCENT_FROM_DWM</code> flag","text":"<p>When set to <code>True</code>, this flag is responsible for changing the <code>accent_normal</code> color to the active title bar color (the colorized one on Windows 10 and 11 and the color with maximum intensity on Windows 8.x; <code>ColorizationColor</code> in Windows 8.x and <code>AccentColor</code> in Windows 10 and 11 in the registry) and generate the accent palette accordingly. This flag makes more sense for Windows 8.x systems, because on Windows 10 and 11 the colored title bar color is usually the same as the system's accent color, but it can also be enabled on Windows 10 and 11. You can enable it like this:</p> <pre><code>import winaccent\n\n# Before enabling the flag\nprint(\"Before enabling the flag\")\nprint(\"========================\\n\")\nprint(f\"accent_light_3: {winaccent.accent_light_3}\")\nprint(f\"accent_light_2: {winaccent.accent_light_2}\")\nprint(f\"accent_light_1: {winaccent.accent_light_1}\")\nprint(f\"accent_normal: {winaccent.accent_normal}\")\nprint(f\"accent_dark_1: {winaccent.accent_dark_1}\")\nprint(f\"accent_dark_2: {winaccent.accent_dark_2}\")\nprint(f\"accent_dark_3: {winaccent.accent_dark_3}\")\n\n# Enable the flag\nwinaccent.Flags.GET_ACCENT_FROM_DWM = True\nwinaccent.update_values()  # Required for the flag changes to take effect\n\n# After enabling the flag\nprint(\"After enabling the flag\")\nprint(\"=======================\\n\")\nprint(f\"accent_light_3: {winaccent.accent_light_3}\")\nprint(f\"accent_light_2: {winaccent.accent_light_2}\")\nprint(f\"accent_light_1: {winaccent.accent_light_1}\")\nprint(f\"accent_normal: {winaccent.accent_normal}\")\nprint(f\"accent_dark_1: {winaccent.accent_dark_1}\")\nprint(f\"accent_dark_2: {winaccent.accent_dark_2}\")\nprint(f\"accent_dark_3: {winaccent.accent_dark_3}\")\n</code></pre> <p>Here's a visual comparasion before enabling the flag and after enabling the flag on Windows 8.x (Normal accent color:  #4617D4; DWM accent color:  #F6C34A):</p> <p> Windows 8.1 example window (title bar color:  #F0C869)</p> <p> Normal accent color palette</p> <p> DWM accent color palette</p>"},{"location":"other-features/flags/#dark_mode_window-flag","title":"<code>DARK_MODE_WINDOW</code> flag","text":"<p>When set to <code>True</code>, this flag will make winaccent return the dark mode versions of the window chrome colors. Useful when your app has also has a dark theme and you want to use the dark mode values when the dark theme is applied. You can enable it like this:</p> <pre><code>import winaccent\n\n# Before enabling the flag\nprint(\"Before enabling the flag\")\nprint(\"========================\\n\")\nprint(f\"titlebar_active: {winaccent.titlebar_active}\")\nprint(f\"titlebar_inactive: {winaccent.titlebar_inactive}\")\nprint(f\"titlebar_active_text: {winaccent.titlebar_active_text}\")\nprint(f\"titlebar_inactive_text: {winaccent.titlebar_inactive_text}\")\nprint(f\"window_border_active: {winaccent.window_border_active}\")\nprint(f\"window_border_inactive: {winaccent.window_border_inactive}\")\n\n# Enable the flag\nwinaccent.Flags.DARK_MODE_WINDOW = True\nwinaccent.update_values()  # Required for the flag changes to take effect\n\n# After enabling the flag\nprint(\"After enabling the flag\")\nprint(\"=======================\\n\")\nprint(f\"titlebar_active: {winaccent.titlebar_active}\")\nprint(f\"titlebar_inactive: {winaccent.titlebar_inactive}\")\nprint(f\"titlebar_active_text: {winaccent.titlebar_active_text}\")\nprint(f\"titlebar_inactive_text: {winaccent.titlebar_inactive_text}\")\nprint(f\"window_border_active: {winaccent.window_border_active}\")\nprint(f\"window_border_inactive: {winaccent.window_border_inactive}\")\n</code></pre> <p>Here's an example output with the flag enabled and disabled on Windows 11:</p> <p> Window light mode palette</p> <p> Window dark mode palette</p> <p>Warning</p> <p>This flag has no effect on Windows 8.x.</p>"},{"location":"other-features/hex-to-rgb-function/","title":"HEX string color to RGB integer tuple function","text":"<p>By design, winaccent color variables return colors in the RGB HEX strings format (<code>#RRGGBB</code>). However, this format might not be suitable for other modules or things, so winaccent also includes a <code>hex_to_rgb()</code> function that takes <code>hex</code> as a string argument (the RGB HEX string color) and returns the RGB integer tuple of that color. It can be used like this:</p> <pre><code>import winaccent\n\n# Prints (0, 120, 212) instead of #0078D4\nprint(winaccent.hex_to_rgb(winaccent.accent_normal))\n</code></pre> <p>It also works with colors that are not provided by winaccent:</p> <pre><code>import winaccent\n\n# Prints (255, 255, 255) instead of #FFFFFF\nprint(winaccent.hex_to_rgb(\"#FFFFFF\"))\n</code></pre>"},{"location":"other-features/refreshing-the-colors-and-listener/","title":"Refreshing the colors and the appearance change listener","text":"<p>By default, when you import the module, winaccent retrieves the colors and settings only once. This means the variables will not update if the colors or settings change after the module is imported. While it would be possible to use functions instead of variables, the current approach helps prevent inconsistencies in colors and settings before and after they change while your app is running.</p> <p>Consider this example: Your user runs your app with the apps' theme set to dark and the system's accent color set to blue. While the app is running, they change the apps' theme to light and the system's accent color to green. If winaccent used functions, opening a new window in your app would cause the new window to follow the updated settings, but the main window would still use the old settings, unless you set up the appearance change listener. With variables, both the main and new windows will continue to use the old settings unless the listener is set up.</p>"},{"location":"other-features/refreshing-the-colors-and-listener/#refreshing-the-colors-manually","title":"Refreshing the colors manually","text":"<p>In some cases, refreshing the colors and settings would be the best. To update all the colors and settings, you can call the <code>update_values()</code> function. Here's an example of how you can use it:</p> <pre><code>import winaccent\n\nprint(f\"Current accent color: {winaccent.accent_normal}\")\ninput(\"Change the system's accent color, then press Enter to see the new color...\")\n\nwinaccent.update_values()\nprint(f\"New accent color: {winaccent.accent_normal}\")\n</code></pre>"},{"location":"other-features/refreshing-the-colors-and-listener/#appearance-change-listener","title":"Appearance change listener","text":"<p>In GUI apps, for making the app responsive to the system's appearance settings, winaccent also includes an appearance change listener. It can be used like this:</p> <pre><code>import winaccent, threading\n\ndef when_appearance_changed():\n    print(f\"Accent color changed to {winaccent.accent_normal}\")\n    print(f\"Apps' theme changed to {'light' if winaccent.apps_use_light_theme else 'dark'}\")\n\nthread = threading.Thread(target = lambda: winaccent.on_appearance_changed(callback = when_appearance_changed), daemon = True)\nthread.start()\n</code></pre> <p>The example code above prints the accent color and the apps' theme when the appearance settings change. But they will only be printed when any appearance setting supported by winaccent changes. This means that the code above will print the accent color and the apps' theme even if they don't actually change, but other settings like the colored title bars and window borders do. To fix this, we will have to add a new <code>event</code> integer argument to the <code>when_appearance_changed()</code> function, check if <code>event</code> is equal to an event constant (more constants bellow) and set the <code>pass_event</code> argument of the <code>on_appearance_changed()</code> function to <code>True</code>. Here's an example:</p> <pre><code>import winaccent, threading\n\ndef when_appearance_changed(event):\n    if event == winaccent.Event.ACCENT_COLOR_CHANGED:\n        print(f\"Accent color changed to {winaccent.accent_normal}\")\n    elif event == winaccent.Event.APPS_THEME_CHANGED:\n        print(f\"Apps' theme changed to {'light' if winaccent.apps_use_light_theme else 'dark'}\")\n\nthread = threading.Thread(target = lambda: winaccent.on_appearance_changed(callback = when_appearance_changed, pass_event = True), daemon = True)\nthread.start()\n</code></pre> <p>In this example, the accent color will only be printed if it changes. The same goes for the apps' theme.</p> <p>Here are all the supported event constants from the <code>Event</code> class:</p> Constant Value ACCENT_COLOR_CHANGED 0 WINDOW_CHROME_COLOR_CHANGED 1 START_MENU_COLOR_CHANGED 2 TASKBAR_COLOR_CHANGED 3 TRANSPARENCY_EFFECTS_TOGGLED 4 APPS_THEME_CHANGED 5 SYSTEM_THEME_CHANGED 6 <p>Note</p> <p>If you set up the listener, there's no need to call <code>update_values()</code> manually, because the values will update automatically.</p> <p>Here is a demonstration of the appearance change listener:</p>"},{"location":"other-features/settings/","title":"Settings","text":"<p>winaccent also allows you to retrieve some appearance-related settings. Here are all the settings that winaccent can retrieve right now:</p>"},{"location":"other-features/settings/#colored-title-bars-and-window-borders","title":"Colored title bars and window borders","text":"<p>This setting can be found on Windows 10 and 11 in Settings &gt; Personalization &gt; Color. It is called \"Show accent color on title bars and window borders\". To check if this setting is enabled or not, you can use the <code>is_titlebar_colored</code> boolean variable like this:</p> <pre><code>import winaccent\n\nif winaccent.is_titlebar_colored:\n    print(\"The title bar and window borders are colored.\")\nelse:\n    print(\"The title bar and window borders aren't colored.\")\n</code></pre> <p>Note</p> <p>On Windows 8.x, this variable will always return <code>True</code>.</p>"},{"location":"other-features/settings/#colored-taskbar-and-start-menu","title":"Colored taskbar and Start menu","text":"<p>This option can also be find on Windows 10 and 11 in Settings &gt; Personalization &gt; Color. It is called \"Show accent color on Start and taskbar\". To check if the Start menu or the taskbar is colored, you can use the <code>is_start_menu_colored</code> and <code>is_taskbar_colored</code> boolean variables like this:</p> <pre><code>import winaccent\n\nif winaccent.is_start_menu_colored:\n    print(\"Start menu is colored.\")\nelse:\n    print(\"Start menu isn't colored.\")\n\nif winaccent.is_taskbar_colored:\n    print(\"Taskbar is colored.\")\nelse:\n    print(\"Taskbar isn't colored.\")\n</code></pre> <p>Why is winaccent offering 2 different variables for this single setting in Windows?</p> <p>At first, it might look confusing that winaccent offers <code>is_start_menu_colored</code> and <code>is_taskbar_colored</code> for the \"Show accent color on Start and taskbar\" setting that controls both the Start menu and the taskbar, but in the registry, the key that controls this setting is called <code>ColorPrevalence</code> and is located in <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize</code>. It can get the following values:</p> Value Effect 0 Both Start menu and taskbar aren't colored. 1 Both Start menu and taskbar are colored. 2 Only the taskbar is colored. <p>The user can modify this value to their liking if they preffer none of them to be colorized, both of them, or only the taskbar. That's why winaccent offers 2 variables for checking if the Start menu or the taskbar is colored or not.</p> <p>Note</p> <p>On Windows 8.x, these variables will always return <code>True</code>.</p>"},{"location":"other-features/settings/#apps-and-systems-theme","title":"Apps' and system's theme","text":"<p>The theme settings can be found on Windows 10 and 11 in Settings &gt; Personalization &gt; Color. The setting is called \"Choose your mode\" and the user can choose the theme of the system. It has a few options:</p> <ul> <li>Light</li> <li>Dark</li> <li>Custom (the user can change the theme of the system and the apps independently)</li> </ul> <p>For detecting the apps' and the system's theme, winaccent offers 2 boolean variables: <code>apps_use_light_theme</code> and <code>system_uses_light_theme</code>. They can be used like this:</p> <pre><code>import winaccent\n\nif winaccent.apps_use_light_theme:\n    print(\"The apps use the light theme\")\nelse:\n    print(\"The apps use the dark theme\")\n\nif winaccent.system_uses_light_theme:\n    print(\"The system uses the light theme\")\nelse:\n    print(\"The system uses the dark theme\")\n</code></pre> <p>Note</p> <p>On Windows 8.x, both <code>apps_use_light_theme</code> and <code>system_uses_light_theme</code> will always return <code>True</code>.</p>"},{"location":"other-features/settings/#transparency-effects","title":"Transparency effects","text":"<p>This setting can be found on Windows 10 and 11 in Settings &gt; Personalization &gt; Color or in Settings &gt; Accessibility &gt; Visual effects. The setting is called \"Transparency effects\" in both locations. To check if this setting is enabled or not, you can use the <code>transparency_effects_enabled</code> boolean variable like this:</p> <pre><code>import winaccent\n\nif winaccent.transparency_effects_enabled:\n    print(\"Transparency effects are enabled.\")\nelse:\n    print(\"Transparency effects are disabled.\")\n</code></pre> <p>Note</p> <p>On Windows 8.x, this variable will always return <code>True</code>.</p>"},{"location":"playground/custom-accent-palette-generation-algorithm/","title":"Custom accent palette generation algorithm","text":"<p>Here's the custom algorithm that winaccent uses to generate the palette of an accent color on Windows 8.x implemented in PyScript. It's not perfect, but there's still room for improvement.</p>"}]}